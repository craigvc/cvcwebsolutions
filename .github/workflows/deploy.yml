name: Deploy to Production

on:
  push:
    branches:
      - master  # Triggers on push to master branch
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy code to production server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          command_timeout: 30m
          script: |
            set -e  # Exit on any error

            cd /home/ploi/cvcwebsolutions

            # Backup production database before deployment
            echo "üíæ Backing up production database..."
            if [ -f data/payload.db ]; then
              cp data/payload.db data/payload.db.backup
              echo "‚úÖ Database backed up to data/payload.db.backup"
            else
              echo "‚ö†Ô∏è No existing database found (this may be first deployment)"
            fi

            # Stash any local changes and pull latest
            echo "üì• Pulling latest code from GitHub..."
            git stash --include-untracked || true
            git pull origin master || { echo "‚ùå Git pull failed"; exit 1; }

            # Ensure .env.production exists
            if [ ! -f .env.production ]; then
              echo "‚ö†Ô∏è .env.production missing! Deployment cannot continue."
              exit 1
            fi

            # Pull pre-built image from GitHub Container Registry
            echo "üì¶ Pulling pre-built Docker image..."
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:latest || { echo "‚ùå Image pull failed"; exit 1; }

            # Stop old container
            echo "üõë Stopping old container..."
            docker compose -f docker-compose.prod.yml down || true

            # Start with pre-built image
            echo "üöÄ Starting container with new image..."
            docker compose -f docker-compose.prod.yml up -d || { echo "‚ùå Container start failed"; exit 1; }

            # Wait for container to be healthy
            echo "‚è≥ Waiting for container to be ready..."
            sleep 10

            # Verify container is running
            if ! docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚ùå Container failed to start!"
              docker compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi

            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f || true

            # Show final status
            echo "‚úÖ Deployment complete!"
            docker compose -f docker-compose.prod.yml ps

            echo "üìã Recent logs:"
            docker compose -f docker-compose.prod.yml logs --tail=30

      - name: Deployment notification
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to production!"
          echo "üåê Site: https://cvcwebsolutions.com"

      - name: Deployment failed
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Check the logs above."
